Metadata-Version: 2.4
Name: insurance-underwriting-system
Version: 1.0.0
Summary: AI-powered automobile insurance underwriting system with A/B testing and configurable rules
Author: Insurance Underwriting System
License: MIT
Project-URL: Homepage, https://github.com/jconnelly/insurance-underwriting-system
Project-URL: Repository, https://github.com/jconnelly/insurance-underwriting-system
Project-URL: Issues, https://github.com/jconnelly/insurance-underwriting-system/issues
Keywords: insurance,underwriting,ai,automation,risk-assessment
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Financial and Insurance Industry
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Office/Business :: Financial
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: pydantic>=2.5.0
Requires-Dist: pydantic-settings>=2.1.0
Requires-Dist: typer>=0.9.0
Requires-Dist: rich>=13.7.0
Requires-Dist: loguru>=0.7.0
Requires-Dist: python-dateutil>=2.8.0
Requires-Dist: pyyaml>=6.0.0
Provides-Extra: dev
Requires-Dist: pytest>=7.4.0; extra == "dev"
Requires-Dist: pytest-cov>=4.1.0; extra == "dev"
Requires-Dist: pytest-mock>=3.12.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: isort>=5.12.0; extra == "dev"
Requires-Dist: flake8>=6.1.0; extra == "dev"
Requires-Dist: mypy>=1.7.0; extra == "dev"
Requires-Dist: pre-commit>=3.5.0; extra == "dev"

# Insurance Underwriting System

A comprehensive Python-based automobile insurance underwriting system with configurable rules, A/B testing capabilities, and CLI interface for testing and demonstration.

## Features

- **Modular Architecture**: Clean separation of concerns with core models, rule evaluation, and configuration management
- **Three Rule Sets**: Conservative, Standard, and Liberal rule configurations for A/B testing
- **Comprehensive Models**: Pydantic-based data models for applications, drivers, vehicles, violations, and claims
- **Risk Scoring**: Intelligent risk assessment with detailed scoring breakdown
- **CLI Interface**: Full-featured command-line interface for testing and batch processing
- **Structured Logging**: Configurable logging with performance metrics and structured output
- **Extensive Testing**: Unit tests with >80% code coverage
- **Sample Data Generation**: Realistic sample data generator for testing

## Installation

### Prerequisites

- Python 3.11 or higher
- pip package manager

### Install Dependencies

```bash
pip install -r requirements.txt
```

### Development Installation

```bash
pip install -e ".[dev]"
```

## Quick Start

### 1. Generate Sample Data

```bash
underwriting-cli generate --count 10 --output sample_data
```

### 2. Evaluate Single Application

```bash
underwriting-cli evaluate sample_data/application_001.json --rule-set standard
```

### 3. Batch Process Applications

```bash
underwriting-cli batch sample_data --rule-set conservative --output results.json
```

### 4. Compare Rule Sets

```bash
underwriting-cli compare sample_data/application_001.json --output comparison.json
```

## Architecture

### Core Components

```
src/underwriting/
├── core/                    # Core business logic
│   ├── models.py           # Pydantic data models
│   ├── engine.py           # Main underwriting engine
│   └── rules.py            # Rule evaluation logic
├── config/                 # Configuration management
│   ├── loader.py          # Configuration loader
│   └── rules/             # Rule configuration files
│       ├── conservative.json
│       ├── standard.json
│       └── liberal.json
├── utils/                  # Utility modules
│   ├── logging.py         # Structured logging
│   └── validation.py      # Data validation
└── cli/                   # Command-line interface
    └── main.py            # CLI implementation
```

### Data Models

The system uses Pydantic models for type safety and validation:

- **Application**: Main application container
- **Driver**: Driver information with violations and claims
- **Vehicle**: Vehicle details and specifications
- **Violation**: Traffic violations with severity levels
- **Claim**: Insurance claims with amounts and fault determination
- **UnderwritingDecision**: Final decision with risk score and reasoning

### Rule Configuration

Rules are stored in JSON files with three categories:

- **Hard Stops**: Automatic denial criteria
- **Adjudication Triggers**: Manual review requirements
- **Acceptance Criteria**: Automatic approval conditions

## CLI Usage

### Available Commands

```bash
underwriting-cli --help
```

### Command Examples

#### System Information
```bash
underwriting-cli info
```

#### Generate Sample Data
```bash
underwriting-cli generate --count 50 --output test_data --seed 42
```

#### Evaluate Application
```bash
underwriting-cli evaluate application.json --rule-set liberal --verbose
```

#### Batch Processing
```bash
underwriting-cli batch applications/ --rule-set conservative --stats
```

#### Rule Set Comparison
```bash
underwriting-cli compare application.json --output comparison_results.json
```

#### Validate Application
```bash
underwriting-cli validate application.json
```

## Rule Sets

### Conservative Rules
- **Strictest criteria** for acceptance
- **Lower thresholds** for denial and adjudication
- **Shorter lookback periods** for some violations
- **Examples**: Single DUI denial, 60-day coverage lapse limit

### Standard Rules
- **Balanced approach** between risk and acceptance
- **Moderate thresholds** for most criteria
- **Standard lookback periods** (3-5 years)
- **Examples**: Two DUI denials, 90-day coverage lapse limit

### Liberal Rules
- **Most accepting** criteria
- **Higher thresholds** for denial
- **Longer lookback periods** for some violations
- **Examples**: Three DUI denials, 180-day coverage lapse limit

## Decision Types

- **ACCEPT**: Automatic approval with calculated risk score
- **DENY**: Automatic denial due to hard stop rules
- **ADJUDICATE**: Manual review required

## Risk Scoring

The system calculates comprehensive risk scores (0-1000) with components:

- **Driver Risk**: Age, license status, experience
- **Vehicle Risk**: Category, value, safety features
- **History Risk**: Violations, claims, driving record
- **Credit Risk**: Credit score impact (optional)

Risk levels: LOW (0-300), MODERATE (301-600), HIGH (601-800), VERY_HIGH (801-1000)

## Configuration

### Logging Configuration

```python
from underwriting.utils.logging import setup_logging

setup_logging(
    level="INFO",
    log_file="logs/underwriting.log",
    enable_console=True,
    enable_file=True
)
```

### Custom Rule Sets

You can create custom rule sets by following the JSON schema in the existing rule files. Place them in the `src/underwriting/config/rules/` directory.

## API Usage

### Basic Usage

```python
from underwriting import UnderwritingEngine, Application

# Initialize engine
engine = UnderwritingEngine()

# Process application
decision = engine.process_application(application, rule_set="standard")

print(f"Decision: {decision.decision}")
print(f"Risk Score: {decision.risk_score.overall_score}")
print(f"Reason: {decision.reason}")
```

### Batch Processing

```python
from underwriting import UnderwritingEngine

engine = UnderwritingEngine()

# Process multiple applications
decisions = engine.batch_process_applications(applications, "conservative")

# Get statistics
stats = engine.get_decision_statistics(decisions)
print(f"Accept Rate: {stats['decisions']['accept']['percentage']:.1f}%")
```

### Rule Set Comparison

```python
from underwriting import UnderwritingEngine

engine = UnderwritingEngine()

# Compare all rule sets
results = engine.compare_rule_sets(application)

for rule_set, decision in results.items():
    print(f"{rule_set}: {decision.decision} (Score: {decision.risk_score.overall_score})")
```

## Testing

### Run All Tests

```bash
pytest
```

### Run with Coverage

```bash
pytest --cov=src/underwriting --cov-report=html
```

### Run Specific Test Module

```bash
pytest tests/test_models.py -v
```

## Sample Data

The system includes a comprehensive sample data generator that creates realistic applications with:

- **Diverse Demographics**: Various ages, locations, and backgrounds
- **Realistic Violations**: Traffic violations with appropriate severity levels
- **Claim Histories**: Insurance claims with varying amounts and fault status
- **Vehicle Variety**: Different makes, models, and categories
- **Risk Profiles**: Low, medium, and high-risk applications

### Generate Sample Data

```python
from underwriting.data.sample_generator import SampleDataGenerator

generator = SampleDataGenerator(seed=42)

# Generate single application
application = generator.generate_application(risk_profile="high")

# Generate batch with risk distribution
applications = generator.generate_batch_applications(
    count=100,
    risk_distribution={"low": 0.3, "medium": 0.5, "high": 0.2}
)
```

## Development

### Project Structure

```
insurance-underwriting-system/
├── src/underwriting/           # Main package
├── tests/                      # Unit tests
├── data/                       # Sample data generation
├── pyproject.toml             # Project configuration
├── requirements.txt           # Dependencies
└── README.md                  # Documentation
```

### Development Setup

```bash
# Install in development mode
pip install -e ".[dev]"

# Run tests
pytest

# Run linting
black src/ tests/
isort src/ tests/
flake8 src/ tests/

# Type checking
mypy src/
```

## Performance

The system is optimized for performance with:

- **Efficient Rule Evaluation**: Short-circuit evaluation for hard stops
- **Caching**: Configuration caching for repeated evaluations
- **Batch Processing**: Optimized batch processing capabilities
- **Structured Logging**: Performance metrics and timing information

## Security

- **Input Validation**: Comprehensive validation using Pydantic
- **No Sensitive Data**: No hardcoded credentials or sensitive information
- **Secure Defaults**: Safe default configurations
- **Audit Trail**: Complete logging of all decisions and rule triggers

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests for new functionality
5. Run the test suite
6. Submit a pull request

## License

This project is licensed under the MIT License. See the LICENSE file for details.

## Support

For support and questions:

- **Issues**: Report issues on the GitHub repository
- **Documentation**: Refer to this README and inline documentation
- **Testing**: Use the CLI interface for testing and validation

## Changelog

### Version 1.0.0

- Initial release with core underwriting functionality
- Three rule sets (Conservative, Standard, Liberal)
- Comprehensive CLI interface
- Sample data generation
- Full test coverage
- Structured logging and monitoring
